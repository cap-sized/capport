pipeline:
  test:
    - label: load_player_ids
      task_type: source
      task_name: load_sources
      emplace: 
        fp_player_ids: "nhl_player_ids.csv"
        fp_state_province: "state_province.csv"
        df_state_province: STATE_PROVINCE
    - label: test_select_column
      task_type: transform
      task_name: select_single_column
      emplace:
        input: PLAYER_IDS
        output: TEST
        column: ^non_existent$

  players:
    - label: load_player_ids
      task_type: source
      task_name: load_sources
      emplace: 
        fp_player_ids: "nhl_player_ids.csv"
        fp_state_province: "state_province.csv"
        df_state_province: STATE_PROVINCE

    - label: nhl_urls
      task_type: transform
      task_name: player_ids_to_urls # user defined
      emplace:
        input: PLAYER_IDS
        output: NHL_URLS
        url_column: nhl_url

    - label: load_full_data
      task_type: request
      task_name: http_json_get_batch_request # user defined
      emplace:
        input: NHL_URLS
        url_column: nhl_url
        output: NHL_PLAYER_DATA_RAW

    - label: nhl_player_data
      task_type: transform
      task_name: transform_nhl_player_data # default
      emplace:
        input: NHL_PLAYER_DATA_RAW
        state_province_df: STATE_PROVINCE
        output: NHL_PLAYER_DATA

    - label: save_player_data
      task_type: sink
      task_name: save_file # default
      emplace:
        input: NHL_PLAYER_DATA
        model: nhl_player

source:
  load_sources: 
    max_threads: 1
    sources:
      - csv: 
          filepath: $fp_player_ids
          output: PLAYER_IDS
          model_fields:
            id: uint64
      - csv: 
          filepath: $fp_state_province
          output: $df_state_province
          model_fields:
            name: str
            code: str
            
request:
  http_json_get_batch_request:
    input: $input
    max_threads: 8
    requests:
      - http_batch:
          method: get
          content_type: application/json
          url_column: $url_column
          output: $output

  http_json_get_single_request:
    input: $input
    max_threads: 1
    requests:
      - http_single:
          method: get
          content_type: application/json
          url_column: $url_column
          output: $output
          template: "https://api-web.nhle.com/v1/meta"
          url_params:
            - input: $input
              param_column: player
              template: "players={}" # optional, default shown
              separator: ","         # optional, default shown

sink:
  save_file: 
    input: $input
    max_threads: 1
    sinks:
      - csv: 
          filepath: canadian_players.csv
          merge_type: replace
          model: $model
      - clickhouse:
          url: "http://default:password@localhost:8123/"
          table: canadian_players_nhl_example
          model: $model
          merge_type: replace
          strict: true
        options:
          order_by: []
          primary_key: [id]
          create_table_if_not_exists: false

model:
  nhl_player:
    id: uint64
    full_name: str
    birthdate: date
    birth_city: str
    birth_state_province_code: str

transform:
  select_single_column:
    input: $input
    output: $output
    steps:
      - select:
          mycol: $column

  player_ids_to_urls:
    input: $input
    output: $output
    steps:
      - select:
          $url_column: 
            format: 
              template: "https://api-web.nhle.com/v1/player/{}/landing"
              columns: [ "id" ]

  transform_nhl_player_data:
    input: $input
    output: $output
    steps:
     - select:
          id: playerId # from the previous step
          first_name: firstName.default # handle subpaths
          last_name: lastName.default # handle subpaths
          full_name: 
            format: 
              columns: [ "firstName.default", "lastName.default" ] 
              template : "{} {}"
          birthdate: birthDate
          birth_city: birthCity.default
          birth_state_province_name: birthStateProvince.default
          birth_state_country_code: birthCountry
          is_nhl: { bool: true }
     - join:
         right: $state_province_df #  << named df
         right_select: 
           birth_state_province_code: code
           birth_state_province_name: name
         left_on: [birth_state_province_name]
         right_on: [birth_state_province_name]
         how: left
     - drop:
       - birth_state_province_name
